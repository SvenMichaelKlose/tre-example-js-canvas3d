(var *scene* nil)
(var *a* nil)
(var *b* nil)

(fn render ()
  (update-canvas)
  (clear-canvas *ctx*)
  (@ (i *scene*)
    (i.render)))

(fn make-plane (width height)
  (with (w    (half width)
         h    (half height)
         vtl  (new vertex (- w) (- h) 0)
         vtr  (new vertex w (- h) 0)
         vbl  (new vertex (- w) h 0)
         vbr  (new vertex w h 0)
         f    (new face (list vtl vtr vbr vbl)
                        [draw-face-image *ctx* _ *texture*])) ;"#00f"]))
    (values (list vtl vtr vbl vbr) (list f))))

(fn make-plane-object (width height)
  (with ((v f) (make-plane width height))
    (new object3d v f)))

(fn make-container ()
  (= *a* (make-plane-object 160 100))
  (= *b* (make-plane-object 160 100))
  (= *a*.z (- 300 62))
  (= *b*.z 300)
  (push *a* *scene*)
  (push *b* *scene*))

(fn make-animation ()
  (with (tt1 (new timetable)
         tt2 (new timetable))
    (tt1.add 9000 (new track-slots *a*
                                   (list "ry")
                                   (list 0 )
                                   (list 360)))
    (tt2.add 9000 (new track-slots *b*
                                   (list "ry")
                                   (list 0 )
                                   (list 360)))
    (list tt1 tt2)))

(fn run-animation (tt)
  (play-tracks [0 run-animation tt] tt [0 render]))

(fn start-site ()
  (alert "start")
  (document-extend)
  (= document.body.style.margin 0)
  (disable-scrollbars)
  (= *texture* (make-video :width 640 :height 480 :webm "video.mp4" :loop? t :autoplay? t))
  (document.body.add *texture*)
  (*texture*.hide)
;  (= *texture*.muted t)
  (make-container)
  (!= (make-animation)
    (native-add-event-listener *texture* "play" #'(() (run-animation !)))))

(add-onload #'start-site)
