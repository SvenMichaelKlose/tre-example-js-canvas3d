;(fn scale (fac x y z)
;  (list (* x fac) (* y fac) (* z fac)))

(var *x* 0)
(var *y* 0)
(var *z* 180)

(fn render-scene (vertices faces ax ay az cx cy cz)
  (@ (i vertices)
    (= (vertex-x i) (vertex-ox i))
    (= (vertex-y i) (vertex-oy i))
    (= (vertex-z i) (vertex-oz i)))
  (@ (i vertices)
    (vertex-rotate i ax ay az)
    (+! (vertex-x i) cx)
    (+! (vertex-y i) cy)
    (+! (vertex-z i) cz)
    (vertex-project i))
  (@ (i faces)
    (= (face-average-z i) (/ (apply #'number+ (@ #'vertex-z (face-vertices i))) 3)))
  (@ (i (reverse (sort-faces faces)))
    (& (face? i)
       (funcall (face-renderer i) i))))

(fn make-3d-object (vertices faces)
  (with (v      (@ [make-vertex :ox _. :oy ._. :oz .._.] vertices)
         v-map  (list-array v)
         f      (@ [make-face :vertices (filter [aref v-map (-- _)] _)
                              :renderer #'draw-face]
                   faces))
    (values v f)))
